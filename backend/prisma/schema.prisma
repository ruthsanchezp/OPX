generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  name      String   
  role      String  
  email     String   @unique 
  phone     String?  
  address   String?  
  city      String?  
  password  String   
  createdAt DateTime @default(now())

  createdOrders  MedicalOrder[] @relation("UserCreatedOrders")
  reviewedOrders MedicalOrder[] @relation("UserReviewedOrders")
}

model Client {
  client_id      Int            @id @default(autoincrement())
  first_name     String         
  last_name      String?        
  agreement_type String?        
  id_fiscal      String         @unique 
  phone          String?        
  email          String?        
  address        String?        
  city           String?        
  birth_date     DateTime?
  created_at     DateTime       @default(now())

  medicalOrders  MedicalOrder[]  
  payments       Payment[]       
}

model Agreement {
  agreement_id Int      @id @default(autoincrement())
  name         String   @db.VarChar(100)
  description  String?  @db.Text
  agreement_type String?    
  status            String?   
  start_date   DateTime?
  end_date     DateTime?
  created_at   DateTime @default(now())
  total_installments Int?    
}

model MedicalOrder {
  order_id      Int      @id @default(autoincrement())
  client_id     Int
  created_by    Int
  reviewed_by   Int?
  created_at    DateTime @default(now())

  observaciones String?  
  cristales     String?   

  client        Client    @relation(fields: [client_id], references: [client_id]) 
  createdBy     User      @relation("UserCreatedOrders", fields: [created_by], references: [id])
  reviewedBy    User?     @relation("UserReviewedOrders", fields: [reviewed_by], references: [id])

  graduations   Graduation[]       
  graduationsNear GraduationNear[]  

  payment Payment?  
}

model Graduation {
  graduation_id Int     @id @default(autoincrement())
  order_id      Int
  eye           String  
  SPH           Float?
  CYL           Float?
  EJE           Float?
  DP            Float?
  created_at    DateTime @default(now())
  medicalOrder  MedicalOrder @relation(fields: [order_id], references: [order_id])  
}

model GraduationNear {
  graduation_near_id Int     @id @default(autoincrement())
  order_id           Int
  eye               String  
  SPH               Float?
  CYL               Float?
  EJE               Float?
  DP                Float?
  created_at        DateTime @default(now())
  medicalOrder      MedicalOrder @relation(fields: [order_id], references: [order_id])  
}

model Payment {
  payment_id    Int      @id @default(autoincrement())
  client_id     Int
  order_id      Int? @unique  // ✅ Se mantiene como único, pero opcional
  amount        Float  @default(0.00)  
  prepaid       Float  @default(0.00)   
  payment_date  DateTime @default(now())
  status        PaymentStatus @default(PENDING)  
  method        String  
  transaction_id String? @unique
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  client        Client   @relation(fields: [client_id], references: [client_id])
  order         MedicalOrder? @relation(fields: [order_id], references: [order_id])  // ✅ Relación opcional
  details       PaymentDetail[]  
  installments  Installment[]  @relation("PaymentToInstallments")  // ✅ Agregamos la relación inversa
}


model PaymentDetail {
  detail_id     Int      @id @default(autoincrement())
  payment_id    Int
  description   String  
  quantity      Int      @default(1)
  unit_price    Float  @default(0.00)
  total_price   Float  @default(0.00)
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
  payment       Payment  @relation(fields: [payment_id], references: [payment_id])
}

model Installment {
  installment_id Int      @id @default(autoincrement())
  payment_id     Int
  amount         Float   @default(0.00)
  due_date       DateTime
  status         PaymentStatus @default(PENDING) // ✅ Estado de la cuota (PENDING, COMPLETED)
  paid_amount    Float   @default(0.00)         // ✅ Monto ya pagado

  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt

  payment        Payment @relation(fields: [payment_id], references: [payment_id], name: "PaymentToInstallments")
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}
