generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  role      String
  email     String   @unique
  phone     String?
  address   String?
  city      String?
  password  String
  createdAt DateTime @default(now())

  medicalOrdersCreated MedicalOrder[] @relation("UserCreatedOrders")
  medicalOrdersReviewed MedicalOrder[] @relation("UserReviewedOrders")
}

model Client {
  client_id   Int       @id @default(autoincrement())
  first_name  String    @db.VarChar(100)
  last_name   String?   @db.VarChar(100)
  agreement_type String? @db.VarChar(50)
  id_fiscal   String    @unique @db.VarChar(50)
  phone       String?   @db.VarChar(20)
  email       String?   @db.VarChar(100)
  address     String?   @db.VarChar(255)
  city        String?   @db.VarChar(100)
  birth_date  DateTime?
  created_at  DateTime  @default(now())

  medicalOrders MedicalOrder[]
}

model Agreement {
  agreement_id      Int       @id @default(autoincrement())
  agreement_type    String?   @db.VarChar(50)
  start_date        DateTime?
  end_date          DateTime?
  status            String?   @db.VarChar(20)
  total_installments Int?
  created_at        DateTime?  @default(now())
}
model MedicalOrder {
  order_id      Int      @id @default(autoincrement())
  client_id     Int
  created_by    Int
  reviewed_by   Int?
  created_at    DateTime @default(now())

  observaciones String?   @db.Text    // ðŸ”¹ Nuevo campo
  cristales     String?   @db.VarChar(255)  // ðŸ”¹ Nuevo campo

  client        Client  @relation(fields: [client_id], references: [client_id])
  createdBy     User    @relation("UserCreatedOrders", fields: [created_by], references: [id])
  reviewedBy    User?   @relation("UserReviewedOrders", fields: [reviewed_by], references: [id])

  graduations   Graduation[]       // ðŸ”¹ GraduaciÃ³n para Lentes de Lejos
  graduationsNear GraduationNear[] // ðŸ”¹ Nueva relaciÃ³n para Lentes de Cerca
}

model GraduationNear {
  graduation_near_id Int     @id @default(autoincrement())
  order_id           Int
  eye               String  @db.VarChar(10) // "O.D" o "O.I"
  SPH               Float?
  CYL               Float?
  EJE               Float?
  DP                Float?
  created_at        DateTime @default(now())

  medicalOrder      MedicalOrder @relation(fields: [order_id], references: [order_id])
}

model Graduation {
  graduation_id Int     @id @default(autoincrement())
  order_id      Int
  eye           String  @db.VarChar(10) // "O.D" o "O.I"
  SPH           Float?
  CYL           Float?
  EJE           Float?
  DP            Float?
  created_at    DateTime @default(now())

  medicalOrder  MedicalOrder @relation(fields: [order_id], references: [order_id])
}
